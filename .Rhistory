L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInicio,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
O
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(0.01,0.01,0.02,0.02,0.02,0.02)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInicio,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)*L
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInicio,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)/100000
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInicio,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)*100000
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInicio,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
H
result
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)*L
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
L
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)/100
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
result
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
(T)
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
(T)
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
(T)
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
(T)
# De derecha a izquierda
# Minimo de columna -> Me voy al renglon Qi = suma de GR igual y mayores i
# Para la siguiente columna menor a la del indice del renglon
interpretaTabla <- function(T,GR){
ordenes = c()
n = nrow(T)
m = ncol(T)
limite = m
while(limite>0){
colAct = T[,limite]
colMin = min(colAct,na.rm=TRUE)
renMin = which(T[,limite] == colMin, arr.ind=TRUE)
costoAcum = sum(GR[renMin:limite])
limite = renMin -1
ordenes <- c(ordenes,c(renMin,costoAcum))
}
ordenes <- c(ordenes,c(NA,sum))
ordenes
R = matrix(ordenes,ncol = 2, byrow=TRUE)
return( R)
}
O = interpretaTabla(T,GR)
T
result
library(SCperf)
# Gross requirements
#L=  c(1500,100 ,700,1200,200,1700)
#c = c(  10,10.5,10 ,11  ,11 ,11  )
#K = c(150 ,150 ,150,200 ,200,200 )
#costoInicio = K+c*L
#costoInventario = c(1,1,1,1.5,1.5,1.5)
L=  c(60,100,10,200,120,15)
c = c(5,5,6,6,7,7)
K = c(150 ,150 ,150,100 ,100,100 )
costoInicio = K+c*L
costoInventario = c(1,1,2,2,2,2)
# Algoritmo de Wagner - Whitin
result <- WW(L,costoInicio,costoInventario,method="forward")
T=t(result$Solution)
(T)
